@page "/gpt/chat"
@using System.Text;

<h3>Gpt Chat</h3>

<div>
    <p>Welcome to Gpt Chat. Please enter your question:</p>
    <textarea @bind="UserInput" rows="10" cols="100" placeholder="Chat Relay Only"></textarea>
    <br />
    <button @onclick="SubmitQuestion">Submit</button>
</div>

<h3>Chat Response</h3>
<textarea @bind="GptChatResponse" rows="10" cols="100" readonly></textarea>

@code {
    string UserInput { get; set; }
    string GptChatResponse { get; set; }

    public async Task SubmitQuestion()
    {

        GptChatResponse = UserInput;
    }

    public interface IGptChatClient
    {
        Task<string> GetResponseAsync(string prompt);
    }

    public class CopilotChatClient : IGptChatClient
    {
        private readonly HttpClient _client;

        public CopilotChatClient()
        {
            _client = new HttpClient
            {
                BaseAddress = new Uri("http://localhost:5000/") // Replace with the address of the service or container
            };
        }

        public async Task<string> GetResponseAsync(string prompt)
        {
            var response = await _client.GetAsync($"api/copilot?question={prompt}");

            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadAsStringAsync();
            }

            throw new Exception($"Failed to ask question: {response.ReasonPhrase}");
        }
    }

    public class OpenAIChatGPTClient : IGptChatClient
    {
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;

        public OpenAIChatGPTClient(string apiKey)
        {
            _httpClient = new HttpClient();
            _apiKey = apiKey;
        }

        public async Task<string> GetResponseAsync(string prompt)
        {
            var requestContent = new StringContent($"{{\"prompt\": \"{prompt}\", \"max_tokens\": 100}}", Encoding.UTF8, "application/json");

            using (var requestMessage = new HttpRequestMessage(HttpMethod.Post, "https://api.openai.com/v1/engines/gpt-4/completions"))
            {
                requestMessage.Headers.Add("Authorization", $"Bearer {_apiKey}");
                requestMessage.Content = requestContent;

                var response = await _httpClient.SendAsync(requestMessage);
                response.EnsureSuccessStatusCode();

                var responseContent = await response.Content.ReadAsStringAsync();
                return responseContent; // You would probably want to deserialize this JSON response
            }
        }
    }

}






